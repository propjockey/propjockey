import QUnit from "steal-qunit"
import { instance, module } from "../src/propjockey.transpiled.wasm.js"

const { test } = QUnit

QUnit.module("Transpiled WebAssembly Slides, Easing, Caches, etc", function (hooks) {
  test("import should work and instance export functions should be available", t => {
    t.ok(instance, "exists #1")
    t.ok(instance.exports, "exists #2")
    t.equal(typeof instance.exports.slide, "function", "exists #3")
    t.equal(typeof instance.exports.amount, "function", "exists #4")
    t.equal(typeof instance.exports.byteSlide, "function", "exists #5")
    t.equal(typeof instance.exports.rgbSlide, "function", "exists #6")
    t.equal(typeof instance.exports.rgbaSlide, "function", "exists #7")
    t.equal(typeof instance.exports.cachedEasing, "function", "exists #8")
    t.equal(typeof instance.exports.setCachedEasingFrame, "function", "exists #9")
    t.equal(typeof instance.exports.allocateCachedEasing, "function", "exists #10")
    t.equal(typeof instance.exports.cubicBezierVal, "function", "exists #11")
    t.equal(typeof instance.exports.cacheCubicBezier, "function", "exists #12")
    t.equal(typeof instance.exports.quadraticBezierVal, "function", "exists #13")
    t.equal(typeof instance.exports.cacheQuadraticBezier, "function", "exists #14")
    t.equal(typeof instance.exports.resetInternalCacheCounter, "function", "exists #15")
    t.ok(module, "exists #16")
  })
  test("slide works", t => {
    const slide = instance.exports.slide
    t.equal( slide(      0,     1,   0.5 ),    0.5, "#1"  )
    t.equal( slide(      0,     2,   0.5 ),      1, "#2"  )
    t.equal( slide(      0,    -2,   0.5 ),     -1, "#3"  )
    t.equal( slide(      1,     0,  0.75 ),   0.25, "#4"  )
    t.equal( slide(     10,   -10,  0.25 ),      5, "#5"  )
    t.equal( slide(    -10,   -20,   2.5 ),    -35, "#6"  )
    t.equal( slide(    -10,     0,   2.5 ),     15, "#7"  )
    t.equal( slide(  0.125,  0.25,     1 ),   0.25, "#8"  )
    t.equal( slide(  0.125,  0.25,     0 ),  0.125, "#9"  )
    t.equal( slide(  0.125,  0.25,     9 ),   1.25, "#10" )
    t.equal( slide(  0.125,  0.25,    -1 ),      0, "#11" )
    t.equal( slide(    0.5,     1,  -0.5 ),   0.25, "#12" )
    t.equal( slide(   -0.5,   1.5,  -0.5 ),   -1.5, "#13" )
    t.equal( slide(   -0.5,  -1.5,  -0.5 ),      0, "#14" )
    t.equal( slide(    0.5,  -1.5,  -0.5 ),    1.5, "#15" )
  })
  test("amount works", t => {
    const amount = instance.exports.amount
    t.equal( amount(      0,     1,    0.5 ),   0.5, "#1"  )
    t.equal( amount(      0,     2,      1 ),   0.5, "#2"  )
    t.equal( amount(      0,    -2,     -1 ),   0.5, "#3"  )
    t.equal( amount(      1,     0,   0.25 ),  0.75, "#4"  )
    t.equal( amount(     10,   -10,      5 ),  0.25, "#5"  )
    t.equal( amount(    -10,   -20,    -35 ),   2.5, "#6"  )
    t.equal( amount(    -10,     0,     15 ),   2.5, "#7"  )
    t.equal( amount(  0.125,  0.25,   0.25 ),     1, "#8"  )
    t.equal( amount(  0.125,  0.25,  0.125 ),     0, "#9"  )
    t.equal( amount(  0.125,  0.25,   1.25 ),     9, "#10" )
    t.equal( amount(  0.125,  0.25,      0 ),    -1, "#11" )
    t.equal( amount(    0.5,     1,   0.25 ),  -0.5, "#12" )
    t.equal( amount(   -0.5,   1.5,   -1.5 ),  -0.5, "#13" )
    t.equal( amount(   -0.5,  -1.5,      0 ),  -0.5, "#14" )
    t.equal( amount(    0.5,  -1.5,    1.5 ),  -0.5, "#15" )
  })
  test("byteSlide works", t => {
    const byteSlide = instance.exports.byteSlide
    t.equal( byteSlide(    0x00,     0xff,     0.5 ),  0x80, "#1"  )
    t.equal( byteSlide(    0x00,  0x9ccff,     0.5 ),  0x80, "#2"  )
    t.equal( byteSlide(  0x1200,     0xff,     0.5 ),  0x80, "#3"  )
    t.equal( byteSlide(  0x12f0,     0xff,     0.5 ),  0xf8, "#4"  )
    t.equal( byteSlide(    0x40,     0x50,    0.75 ),  0x4c, "#5"  )
    t.equal( byteSlide(    0x18,     0x30,    0.25 ),  0x1e, "#6"  )
    t.equal( byteSlide(    0x18,     0x30,      11 ),  0xff, "#7"  )
    t.equal( byteSlide(    0x18,     0x30,      -1 ),  0x00, "#8"  )
    t.equal( byteSlide(    0x00,     0x30,      -2 ),  0x00, "#9"  )
    t.equal( byteSlide(    0x41,     0x1a,   1.333 ),  0x0D, "#10" )
    t.equal( byteSlide(    0x53,     0xcc,   -0.57 ),  0x0E, "#11" )
    t.equal( byteSlide(    0x4D,     0x2c,    2.03 ),  0x0A, "#12" )
    t.equal( byteSlide(    0x00,     0x01,      13 ),  0x0D, "#13" )
    t.equal( byteSlide(    0x61,     0x51,   5.375 ),  0x0B, "#14" )
    t.equal( byteSlide(    0x73,     0xb3,  -1.578 ),  0x0E, "#15" )
    t.equal( byteSlide(    0x6d,     0xcc,      -1 ),  0x0E, "#16" )
    t.equal( byteSlide(    0x01,     0xf7,   0.057 ),  0x0F, "#17" )
  })
  test("rgbSlide works", t => {
    const rgbSlide = instance.exports.rgbSlide
    t.equal( rgbSlide(  0x596168,  0x0a031b,    0.5 ),  0x323242,  "#1"  )
    t.equal( rgbSlide(  0x616861,  0x0038a7,    0.5 ),  0x305084,  "#2"  )
    t.equal( rgbSlide(  0x212059,  0x734f95,   0.75 ),  0x5e4386,  "#3"  )
    t.equal( rgbSlide(  0x6F7520,  0xd80272,  -0.25 ),  0x55920c,  "#4"  )
    t.equal( rgbSlide(  0x666F75,  0x4d0195,  0.125 ),  0x636179,  "#5"  )
    t.equal( rgbSlide(  0x6E6420,  0x666666,  0.333 ),  0x6b6537,  "#6"  )
    t.equal( rgbSlide(  0x6D6521,  0x000000,      1 ),  0x000000,  "#7"  )
    t.equal( rgbSlide(  0x20F09F,  0x000000,      0 ),  0x20F09F,  "#8"  )
    t.equal( rgbSlide(  0x8CB07D,  0x000000,      9 ),  0x000000,  "#9"  )
    t.equal( rgbSlide(  0x000000,  0xffffff,   -0.5 ),  0x000000,  "#10" )
    t.equal( rgbSlide(  0xffffff,  0x000000,  -0.25 ),  0xffffff,  "#11" )
    t.equal( rgbSlide(  0x000000,  0xffffff,    0.5 ),  0x808080,  "#12" )
    t.equal( rgbSlide(  0xffffff,  0x000000,   0.25 ),  0xbfbfbf,  "#13" )
    t.equal( rgbSlide(  0x000000,  0x808080,      2 ),  0xffffff,  "#14" )
    t.equal( rgbSlide(  0x000000,  0x7f7f7f,      2 ),  0xfefefe,  "#15" )
    t.equal( rgbSlide(  0x000000,  0x808080,      5 ),  0xffffff,  "#16" )
  })
  test("rgbaSlide works", t => {
    const rgbaSlide = instance.exports.rgbaSlide
    t.equal( rgbaSlide(  0x5B596168,  0x00590061,    0.5 ) >>> 0,  0x2e593064,  "#1"  )
    t.equal( rgbaSlide(  0x61686121,  0x00680061,    0.5 ) >>> 0,  0x30683041,  "#2"  )
    t.equal( rgbaSlide(  0x20596F75,  0x00680061,   0.75 ) >>> 0,  0x08641c66,  "#3"  )
    t.equal( rgbaSlide(  0x20666F75,  0x00210020,  -0.25 ) >>> 0,  0x28778b8a,  "#4"  )
    t.equal( rgbaSlide(  0x6E64206D,  0x0059006F,  0.125 ) >>> 0,  0x60631c6d,  "#5"  )
    t.equal( rgbaSlide(  0x652120F0,  0x00750020,  0.333 ) >>> 0,  0x433d15ab,  "#6"  )
    t.equal( rgbaSlide(  0x9F8CB05D,  0x0066006F,      1 ) >>> 0,  0x0066006f,  "#7"  )
    t.equal( rgbaSlide(  0x0a031bff,  0x0075006E,      0 ) >>> 0,  0x0a031bff,  "#8"  )
    t.equal( rgbaSlide(  0x0038a7ff,  0x00640020,      9 ) >>> 0,  0x00ff0000,  "#9"  )
    t.equal( rgbaSlide(  0x734f95ff,  0x006D0065,   -0.5 ) >>> 0,  0xac40e0ff,  "#10" )
    t.equal( rgbaSlide(  0xd80272ff,  0x00210020,  -0.25 ) >>> 0,  0xff008eff,  "#11" )
    t.equal( rgbaSlide(  0x4d0195ff,  0xD83CDF30,    0.5 ) >>> 0,  0x921eba98,  "#12" )
    t.equal( rgbaSlide(  0x666666ff,  0x000000ff,   0.25 ) >>> 0,  0x4c4c4cff,  "#13" )
    t.equal( rgbaSlide(  0xff000000,  0x808080cc,      2 ) >>> 0,  0x01ffffff,  "#14" )
    t.equal( rgbaSlide(  0x00ff00cc,  0x7f7f7f88,      2 ) >>> 0,  0xfe00fe44,  "#15" )
    t.equal( rgbaSlide(  0x0000ff57,  0x80808044,      5 ) >>> 0,  0xffff0000,  "#16" )
  })
})
